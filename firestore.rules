
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users Collection
    match /users/{userId} {
      // Allow users to read their own data
      // Allow any authenticated user to read other users' public data (name, avatar, role)
      allow read: if isAuthenticated();
      
      // Allow users to create their own profile
      allow create: if request.auth.uid == userId;

      // Allow users to update their own data
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Events Collection
    match /events/{eventId} {
      // Allow any authenticated user to read event data
      allow read: if isAuthenticated();
      
      // Allow Admins or Creators to create/update events
      allow write: if isAuthenticated() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Creator']);
    }

    // Announcements Collection
    match /announcements/{announcementId} {
       // Allow any authenticated user to read announcement data
      allow read: if isAuthenticated();
      
      // Allow Admins or Creators to create/update announcements
      allow write: if isAuthenticated() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Admin', 'Creator']);
    }

    // Conversations and Messages
    match /conversations/{conversationId} {
      // Allow read/write only if the user is a participant in the conversation
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        // Allow read only if user is a participant
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
        
        // Allow create only if user is the sender and is a participant
        allow create: if isAuthenticated() 
                      && request.resource.data.senderId == request.auth.uid
                      && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
  }
}
